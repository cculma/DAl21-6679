117+28+26+33
library(asreml)
c * 100 / b
a <- 10441
b <- 9277
c <- 7476
c * 100 / b
c * 100 / a
d <- 3701
d * 100 / b
d * 100 / a
d * 100 / c
117 + 28 + 26 + 33
# stagewise
rm(list = ls())
detach("package:base", unload = TRUE)
library(base)
install.packages(c("augmentedRCBD", "bslib", "confintr", "countrycode", "curl", "deldir", "DescTools", "golem", "igraph", "inti", "jsonlite", "maptools", "Matrix", "matrixStats", "mice", "mvtnorm", "parallelly", "parameters", "performance", "plotly", "RcppArmadillo", "reticulate", "rmarkdown", "sp", "StanHeaders", "styler", "ucminf", "usethis"))
install.packages("Matrix")
library(scrime)
list.ia <- list(2,1,3,3,3,2,2)
list.snp <- list(1,10,20,30,40,50,60)
simulacao_1 <- simulateSNPglm(n.obs = 250, n.snp = 1000,list.ia = list.ia, list.snp = list.snp, beta0 = 0, beta = c(200,200,200,900,200,200,200) , maf = c(0.1, 0.4),err.fun=rnorm,sd=5,rand=123)
genotipo_sim1 <- as.data.frame(simulacao_1$x)
fenotipo_sim1 <- simulacao_1$y
vector_SNP1 <- c(1,10,20,30,40,50,60)
#Histogram of the phenotype
hist(fenotipo_sim1, col='gray', xlab="Simulated phenotype 1", ylab="Number of bulls", main="")
#Boxplot of the Phenotype
boxplot(fenotipo_sim1, ylab="Simulated phenotype 1")
#####Filter 1#####
#Function for calculating the Spearman correlation coefficient
teste.spearman <- function(genotipo, fenotipo){
p_value <- vector()
for (i in 1:ncol(genotipo))
{
p_value[i] <- cor.test(genotipo[,i],fenotipo, method="spearm",exact=FALSE)$p.value
}
return(p_value)
}
Pvec_sim1 <- vector()
Pvec_sim1 <- teste.spearman(genotipo_sim1,fenotipo_sim1)
length(Pvec_sim1)
#Bonferroni corretion
PvecAdj_sim1 <- p.adjust(Pvec_sim1,method="bonferroni")
hist(PvecAdj_sim1)
length(PvecAdj_sim1)
names(Pvec_sim1) <- colnames(genotipo_sim1)
Pvec_sim1_sort <- Pvec_sim1[order(Pvec_sim1)]
View(Pvec_sim1_sort)
#Calculating the lowest p-value adjusted
min(PvecAdj_sim1)
#Calculating the SNP with the lowest p-value adjusted
names(genotipo_sim1)[which.min(PvecAdj_sim1)]
#Sorting increasingly SNPs by adjusted p-values
PvecAdj_sim1_sort <- PvecAdj_sim1[order(PvecAdj_sim1)]
View(PvecAdj_sim1_sort)
View(data_s_10_9_sim1)
View(data_s_0.60_sim1)
View(data_s_10_1_sim1)
#Separating the markers for interval adjusted p-value
data_s_10_9_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-9]])
data_s_10_8_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-8]])
data_s_10_7_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-7]])
data_s_10_6_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-6]])
data_s_10_5_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-5]])
data_s_10_4_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-4]])
data_s_10_3_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-3]])
data_s_10_2_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-2]])
data_s_10_1_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 1e-1]])
data_s_0.20_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.20]])
data_s_0.30_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.30]])
data_s_0.40_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.40]])
data_s_0.50_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.50]])
data_s_0.60_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.60]])
data_s_0.70_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.70]])
data_s_0.80_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.80]])
data_s_0.90_sim1 <- as.data.frame(genotipo_sim1[,names(genotipo_sim1)[PvecAdj_sim1 < 0.90]])
modelo_correto_sim1 <- genotipo_sim1[,vector_SNP1]
#Creating dataframes for generation of ARFF files
data_s_10_9_sim1.arff<-as.data.frame(cbind(data_s_10_9_sim1,fenotipo_sim1))
data_s_10_8_sim1.arff<-as.data.frame(cbind(data_s_10_8_sim1,fenotipo_sim1))
data_s_10_7_sim1.arff<-as.data.frame(cbind(data_s_10_7_sim1,fenotipo_sim1))
data_s_10_6_sim1.arff<-as.data.frame(cbind(data_s_10_6_sim1,fenotipo_sim1))
data_s_10_5_sim1.arff<-as.data.frame(cbind(data_s_10_5_sim1,fenotipo_sim1))
data_s_10_4_sim1.arff<-as.data.frame(cbind(data_s_10_4_sim1,fenotipo_sim1))
data_s_10_3_sim1.arff<-as.data.frame(cbind(data_s_10_3_sim1,fenotipo_sim1))
data_s_10_2_sim1.arff<-as.data.frame(cbind(data_s_10_2_sim1,fenotipo_sim1))
data_s_10_1_sim1.arff<-as.data.frame(cbind(data_s_10_1_sim1,fenotipo_sim1))
data_s_0.20_sim1.arff<-as.data.frame(cbind(data_s_0.20_sim1,fenotipo_sim1))
data_s_0.30_sim1.arff<-as.data.frame(cbind(data_s_0.30_sim1,fenotipo_sim1))
data_s_0.40_sim1.arff<-as.data.frame(cbind(data_s_0.40_sim1,fenotipo_sim1))
data_s_0.50_sim1.arff<-as.data.frame(cbind(data_s_0.50_sim1,fenotipo_sim1))
data_s_0.60_sim1.arff<-as.data.frame(cbind(data_s_0.60_sim1,fenotipo_sim1))
data_s_0.70_sim1.arff<-as.data.frame(cbind(data_s_0.70_sim1,fenotipo_sim1))
data_s_0.80_sim1.arff<-as.data.frame(cbind(data_s_0.80_sim1,fenotipo_sim1))
data_s_0.90_sim1.arff<-as.data.frame(cbind(data_s_0.90_sim1,fenotipo_sim1))
data_completos_sim1.arff<-as.data.frame(cbind(genotipo_sim1,fenotipo_sim1))
modelo_correto_sim1.arff<-as.data.frame(cbind(modelo_correto_sim1,fenotipo_sim1))
#Loading the package RWeka
library(RWeka)
data_s_0.20_sim1_without_Bonferroni
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
library(ASRgwas)
remove.packages("ASRgwas")
library(ASRtriala)
remove.packages("ASRtriala")
library(AmesHousing)
library(rsample)      # data splitting
library(randomForest) # basic implementation
library(ranger)       # a faster implementation of randomForest
library(caret)        # an aggregator package for performing many machine learning models
library(h2o)          # an extremely fast java-based platform
# stagewise
rm(list = ls())
devtools::install_github("jendelman/GWASpoly", build_vignettes=FALSE)
install.packages("devtools")
devtools::install_github("jendelman/GWASpoly", build_vignettes=FALSE)
library(GWASpoly)
rm(list = ls())
library(GWASpoly)
library(ggplot2)
install.packages(c("updog","ldsep"))
library(updog)
library(ldsep)
library(StageWise)
devtools::install_github("jendelman/StageWise", build_vignettes=FALSE)
library(data.table)
library(tidyverse)
library(asremlPlus)
library(goeveg)
library(asreml)
##############
# To annotate markers
# load gene annotation Medicago sativa Zhongmu No1
load("~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/yield_FD/RData/i_5.2.8.RData")
i_5.2.8 <- i_5.2.8 %>% dplyr::select(1,3)
library(GWASpoly)
library(tidyverse)
library(vcfR)
library(sommer)
library(ggplot2)
##############
# To annotate markers
# load gene annotation Medicago sativa Zhongmu No1
load("~/OneDrive - Washington State University (email.wsu.edu)/Sen_2020/yield_FD/RData/i_5.2.8.RData")
i_5.2.8 <- i_5.2.8 %>% dplyr::select(1,3)
head(i_5.2.8)
library(asreml)
library(asreml)
library(sommer)
install.packages("sommer")
library(sommer)
rm(list = ls())
data("DT_example")
DT <- DT_example
A <- A_example
View(A)
View(DT)
str(DT)
ans1 <- mmec(Yield~1,
random= ~ Name + Env + Env:Name + Env:Block,
rcov= ~ units, nIters=3,
data=DT, verbose = FALSE)
summary(ans1)$varcomp
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
DT$idd <-DT$id; DT$ide <-DT$id ### look at the data
DT[1:5,1:5]
GT[1:5,1:5]
MP[1:5,1:5]
MP[1:5,1:3]
DT$idd
DT[1:5,1:5]
DT$id
DT$ide
DT[1:5,1:5]
View(DT)
DT <- DT_cpdata
dim(GT)
A <- A.mat(GT) # additive relationship matrix
D <- D.mat(GT) # dominance relationship matrix
E <- E.mat(GT) # epistatic relationship matrix
dim(A)
dim(D)
dim(E)
GT[1:5,1:5]
ans.ADE <- mmer(fixed = color~1,
random = ~ vsr(id,Gu=A) + vsr(idd,Gu=D),
rcov = ~ units,
nIters = 3,
data = DT,
verbose = FALSE)
DT$idd <-DT$id
DT$ide <-DT$id ### look at the data
ans.ADE <- mmer(fixed = color~1,
random = ~ vsr(id,Gu=A) + vsr(idd,Gu=D),
rcov = ~ units,
nIters = 3,
data = DT,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
(summary(ans.ADE)$varcomp)
?A.mat
library(AGHmatrix)
data(snp.pine)
dim(snp.pine)
snp.pine[1:5,1:5]
?Amatrix
Amat <- Amatrix(ped.sol, ploidy=4, w = 0.1)
data(ped.sol)
data(snp.sol)
Amat <- Amatrix(ped.sol, ploidy=4, w = 0.1)
dim(Amat)
dim(ped.sol)
dim(snp.sol)
G_Dominance <- Gmatrix(snp.sol, method="Endelman", ploidy=4)
dim(G_Dominance)
snp.sol[1:5,1:5]
D[1:5,1:5]
G_Dominance[1:5,1:5]
snp.sol[1:5,1:5]
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=snp.sol, maf=0.05, method="VanRaden")
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=snp.sol, maf=0.05, method="VanRaden", ploidy=4)
D[1:5,1:5]
G_Dominance[1:5,1:5]
G_VanRaden[1:5,1:5]
?AmatrixPolycross
devtools::install_github("rramadeu/AGHmatrix")
library(AGHmatrix)
?AmatrixPolycross
devtools::install_github("prmunoz/AGHmatrix")
library(AGHmatrix)
?AmatrixPolycross
remove.packages(AGHmatrix)
library(AGHmatrix)
?AmatrixPolyCross
?AmatrixPolyCross
?Amatrix
library(AGHmatrix)
?AmatrixPolyCross
devtools::install_github("rramadeu/AGHmatrix")
library(AGHmatrix)
?AmatrixPolyCross
?Amatrix
?Amatrix
library(AGHmatrix)
rm(list = ls())
library(sommer)
?Amatrix
?
data(ped.sol)
?AmatrixPolyCross
setwd("~/medin297@umn.edu - Google Drive/My Drive/GSDIG-selected/1_updog/")
a1 <- read.csv("DAl21_poly.txt")
a1 <- read.table("DAl21_poly.txt", sep = "\t", header = T, row.names = 1)
a1[1:5,1:5]
library(sommer)
data("DT_example")
DT <- DT_example
A <- A_example
str(DT)
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
DT[1:5,1:5]
View(DT)
str(DT)
View(DT)
13 * 36
setwd("~/medin297@umn.edu - Google Drive/My Drive/GSDIG-selected/3_GWASpoly/")
pheno <- read.csv("Stem_strength_1.csv", row.names = 1)
head(pheno)
pheno <- read.csv("Stem_strength_1.csv")
head(pheno)
pheno$idd <-pheno$gen
head(pheno)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(id,Gu=A) + vsr(idd,Gu=D),
rcov = ~ units,
nIters = 3,
data = DT,
verbose = FALSE)
a1[1:5,1:5]
G_Dominance <- Gmatrix(a1, method="Endelman", ploidy=4)
a1[1:5,1:5]
G_Dominance <- Gmatrix(a1, method="Endelman", ploidy=4)
class(a1)
a1 <- as.matrix(a1)
G_Dominance <- Gmatrix(a1, method="Endelman", ploidy=4)
G_VanRaden <- Gmatrix(a1=snp.sol, maf=0.05, method="VanRaden", ploidy=4)
G_VanRaden <- Gmatrix(SNPmatrix=a1, maf=0.05, method="VanRaden", ploidy=4)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
head(pheno)
ans.ADE <- mmer(fixed = stem_fill ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
head(pheno)
ans.ADE <- mmer(fixed = stem_strength ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
ans.ADE <- mmer(fixed = winter_injury ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
(summary(ans.ADE)$varcomp)
?A.mat
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=a1, maf=0.05, method="VanRaden", ploidy=4, ploidy.correction = T)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=a1, maf=0.05, method="VanRaden", ploidy=4, ploidy.correction = F)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
G_Dominance <- Gmatrix(SNPmatrix=a1, method="Endelman", ploidy=4, ploidy.correction = T)
dim(G_Dominance)
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=a1, maf=0.05, method="VanRaden", ploidy=4, ploidy.correction = T)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
A <- A.mat(a1)
A[1:5,1:5]
G_VanRaden[1:5,1:5]
a1[1:5,1:5]
D <- D.mat(a1)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(id,Gu=A) + vsr(idd,Gu=D),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(gen,Gu=A) + vsr(idd,Gu=D),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
(summary(ans.ADE)$varcomp)
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, h2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, H2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
(summary(ans.ADE)$varcomp)
?Gmatrix
?mmer
a1[1:5,1:5]
class(a1)
colSums(a1)
nrow(a1)
colSums(a1)/(nrow(a1) * 4)
Frequency <- colSums(a1)/(nrow(a1) * 4)
Frequency
Frequency <- cbind(Frequency,1-Frequency)
View(Frequency)
SixPQ <- 6 * t((Frequency[, 1]^2)) %*% (Frequency[, 2]^2)
View(SixPQ)
Frequency
Frequency[, 1]^2
6 * t((Frequency[, 1]^2) %*% t(rep(1,nrow(SNPmatrix))))
6 * t((Frequency[, 1]^2) %*% t(rep(1,nrow(a1))))
SNPmatrix <- 6 * t((Frequency[, 1]^2) %*% t(rep(1,nrow(a1)))) -
3*t((Frequency[, 1]) %*% t(rep(1,nrow(a1)))) * a1 + 0.5 * a1 * (a1-1)
SNPmatrix[1:5,1:5]
dim(SNPmatrix)
t((Frequency[, 1]^2)
)
(rep(1,nrow(a1)))
rep(1,nrow(a1)))
rep(1,nrow(a1))
length(rep(1,nrow(a1)))
a2 <- a1-1
a2[1:5,1:5]
a2 <- a1 * (a1-1)
a2[1:5,1:5]
a2 <- a1 + 0.5 * a1 * (a1-1)
a2[1:5,1:5]
6 * t((Frequency[, 1]^2) %*% t(rep(1,nrow(a1))))
a2 <- 6 * t((Frequency[, 1]^2) %*% t(rep(1,nrow(a1))))
a2[1:5,1:5]
dim(a2)
a2 <- 3 * t((Frequency[, 1])   %*% t(rep(1,nrow(a1)))) * a1 + 0.5 * a1 * (a1-1)
a2[1:5,1:5]
dim(a2)
length(t((Frequency[, 1]^2))
)
length(t(rep(1,nrow(a1))))
a2 <- 6 * t((Frequency[, 1]^2) %*% t(rep(1,nrow(a1))))
dim(a2)
length(t(rep(1,nrow(a1))))
length(t((Frequency[, 1]^2)))
dim(a2)
9 * 5 * 3
9 * 5
135/5
1250000000 / 27
G_Dominance <- Gmatrix(SNPmatrix=a1, method="Endelman", ploidy=4, ploidy.correction = T)
dim(G_Dominance)
#Computing the additive relationship matrix based on VanRaden 2008
G_VanRaden <- Gmatrix(SNPmatrix=a1, maf=0.05, method="VanRaden", ploidy=4, ploidy.correction = T)
G_VanRaden[1:5,1:5]
G_Dominance[1:5,1:5]
ans.ADE <- mmer(fixed = stem_color ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
summary(ans.ADE)$varcomp
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, H2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
?A.mat
summary(ans.ADE)$varcomp
ans.ADE <- mmer(fixed = stem_fill ~ 1,
random = ~ vsr(gen,Gu=G_VanRaden) + vsr(idd,Gu=G_Dominance),
rcov = ~ units,
nIters = 3,
data = pheno,
verbose = FALSE)
summary(ans.ADE)$varcomp
vpredict(ans.ADE, h2 ~ (V1) / ( V1+V3) ) # narrow sense
vpredict(ans.ADE, H2 ~ (V1+V2) / ( V1+V2+V3) ) # broad-sense
a1[1:5,1:5]
setwd("~/medin297@umn.edu - Google Drive/My Drive/GSDIG-selected/1_updog/")
write.csv(genomat7, "DAl21_pruned.txt", row.names = T, quote = F)
library(AGHmatrix)
library(pheatmap)
library(dendextend)
setwd("~/medin297@umn.edu - Google Drive/My Drive/GSDIG-selected/1_updog/")
# D1 <- read.table("DAl21_GWAS.txt", sep = "\t", row.names = 1, header = T)
D1 <- read.csv("DAl21_pruned.txt", header = T, row.names = 1)
D1[1:5,1:5]
dim(D1)
class(D1)
D2 <- as.matrix(D1)
D3 <- scale(D2, center = TRUE, scale = TRUE)
D3[1:5,1:5]
G1 <- Gmatrix(D2, method="VanRaden", ploidy=4, maf=0.05, ploidy.correction = T)
class(G1)
G1[1:5,1:5]
dim(G1)
dim(G2)
dim(G3)
my_hclust <- hclust(dist(G1), method = "complete")
my_col <- cutree(tree = as.dendrogram(my_hclust), k = 3)
my_col <- data.frame(cluster = ifelse(test = my_col == 1, yes = "cluster 1", no = "cluster 2"))
head(my_col)
my_col <- as.data.frame(cutree(tree = as.dendrogram(my_hclust), k = 3))
lev4 <- as.data.frame(rownames(G1))
colnames(lev4) <- "RN"
lev4 <- lev4 %>% separate(col = "RN", into = c("pop","gen"), sep = "_", remove = F) %>% dplyr::select(-3) %>% column_to_rownames("RN")
library(tidyverse)
lev4 <- lev4 %>% separate(col = "RN", into = c("pop","gen"), sep = "_", remove = F) %>% dplyr::select(-3) %>% column_to_rownames("RN")
View(lev4)
pheatmap(G1, annotation_row = lev4, annotation_col = my_col, show_colnames = F, show_rownames = F)
lev4
class(lev4)
